{"version":3,"sources":["components/common/header/index.js","views/about/about.js","views/game/cards/cards.js","views/game/wrapper/wrapper.js","views/game/start/start.js","views/game/game.js","utils/API.js","App.js","views/login/login.js","views/score/score.js","serviceWorker.js","index.js"],"names":["Component","Card","props","react_default","a","createElement","className","concat","color","key","onClick","clickForm","id","level","Wrapper","_this","this","deck","map","card","Start","startGame","Game","state","deckSize","cards","order","selected","score","maxScore","message","target","componentDidMount","setState","buildDeck","indexOf","rightClick","console","log","sortDeck","push","nextPhase","levels","length","completeGame","i","sort","temporaryValue","randomIndex","currentIndex","Math","floor","random","displayDeck","renderPage","wrapper_Wrapper","API","route","query","axios","get","headers","Access-Control-Allow-Origin","App","cardsOrder","buildArray","BrowserRouter","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d129f25f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { \n  // BrowserRouter as Router, \n  // Route, \n  Link } from \"react-router-dom\";\n\nimport \"./style.scss\"\n\nexport default class Header extends Component {\n    state = {\n        name: \"clicky\",\n        user: \"Rafael\",\n        Score: 0,\n        Life: 5,\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/game\">Clicky</Link>\n            {/* <a className=\"navbar-brand\" href=\"#\">Clicky</a> */}\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            {/* <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\"> */}\n                {/* <Link to=\"/about\">About</Link> */}\n                  {/* <a className=\"nav-link\" href=\"#\">About <span className=\"sr-only\">(current)</span></a> */}\n                {/* </li>\n                <li className=\"nav-item\">\n                <Link to=\"/score\">Score</Link> */}\n                  {/* <a className=\"nav-link\" href=\"#\">Scores</a> */}\n                {/* </li>\n                <li className=\"nav-item\">\n                <Link to=\"/profile\">Profile</Link> */}\n                  {/* <a className=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Profile</a> */}\n                {/* </li>\n              </ul>\n              <span className=\"navbar-text\">\n              <Link to=\"/login\">Login</Link>\n              </span>\n            </div> */}\n          </nav>\n        )\n    }\n}","import React, { Component } from \"react\";\n\nexport default class About extends Component {\n    render() {\n        return (\n            <section className=\"about__section\">\n                <h2>About the Game</h2>\n                <p>Game description</p>\n                <hr/>\n                <h2>About the Developer</h2>\n                <p>Bio</p>\n            </section>\n        )\n    }\n}","import React from \"react\";\nimport \"./style.scss\"\n\nexport default function Card(props){\n        return (\n        <div className={`clicky-card clicky-card--${props.color}`} \n                key={props.key} \n                onClick={() => {props.clickForm(props.id)}}>\n                \n                <span className=\"clicky-card__text\">\n                {(props.level === 0) ? (props.color) : null}\n                </span>\n        </div>\n        )\n    \n}","import React, { Component } from \"react\";\nimport Card from \"../cards/cards\"\n\nexport default class Wrapper extends Component {\n\n  // componentDidMount = () => {\n  //   console.log(this.props.state.level)\n  // }\n    render() {\n    return (\n      <div \n      className=\"wrapper d-flex flex-wrap justify-content-around\">\n      {this.props.deck.map(card => (\n            <Card color={card.color} \n                  id={card.id}\n                  key={card.key}\n                  clickForm={this.props.clickForm}   \n                  level={this.props.level}               \n          />\n      ))}\n      \n      </div>\n    )\n      }\n    \n  }","import React from \"react\";\n\nexport default function Start(props){\n        return (\n            <div className=\"start-painel\">\n\n        <div className=\"start-painel__title\"\n        onClick={() => props.startGame()}>\n            <h1>Clicky Game</h1>\n            <div>\n                <p>Test your memory!</p>\n                <hr/>\n                <p>Press to Start</p>\n            </div>\n        </div>\n        </div>\n        )\n    \n}","import React, { Component } from \"react\";\nimport Wrapper from \"./wrapper/wrapper\"\nimport Start from \"./start/start\"\nimport cards from \"../../cards.json\"\n\nexport default class Game extends Component {\n\n    state = {\n        level: null,\n        deckSize: 6,\n        cards,\n        deck: [],\n        order: [],\n        selected: [],\n        score: 0,\n        maxScore: 0,\n        message: [\n            { level: 0, target: 6, message: \"try to click only once in each color, without repeating\"},\n            { level: 1, target: 6, message: \"try it again, without the labels\"}\n        ]\n    }\n\n    \n\n    componentDidMount = () => {\n        this.setState({ level: null, deckSize: 3})\n\n        this.buildDeck();\n    }\n\n    clickForm = (id) => {\n        const selected =  this.state.selected\n\n        if (selected.indexOf(id) === -1) {\n            this.rightClick(id)\n           \n        } else {\n            console.log('you lose')\n            this.setState({ score: 0, selected: [] })\n        }\n        \n        this.sortDeck()\n    }\n\n    rightClick = (id) => {\n        let level = this.state.level\n        let score = this.state.score;\n        let maxScore = this.state.maxScore;\n        let target = this.state.message[level].target;\n\n        this.state.selected.push(id);\n        score++\n\n        this.setState({ score: score})\n        \n        console.log(score, target)\n        if (score === target) {\n            console.log('next')\n            this.nextPhase()\n        } else if (score > maxScore) {\n            console.log('increment')\n            this.setState({maxScore: score})\n        }\n\n    }\n\n    nextPhase = () => {\n        const levels = this.state.message.length\n        let level = this.state.level\n\n        if ( levels === level) {\n            this.completeGame()\n        } else {\n            level++\n            this.setState({ level: level, selected: [], maxScore: 0 })\n        }\n    }\n\n    completeGame = () => {\n        let message = `Contratulations! You completed all available phases. \n                           More complex challenges are comming soon`\n        \n\n        this.setState({ level: 0, selected: [], message: message })\n\n    }\n\n    buildDeck = () => {\n       for (let i = 0; i < this.state.deckSize; i++ ) {\n           this.state.deck.push(cards[i])\n       }\n\n       this.state.deck.sort();\n       \n    //    .sort()?.log(deck)\n    }\n\n    sortDeck = () => {\n        let deck = this.state.deck\n        var currentIndex = deck.length, \n        temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = deck[currentIndex];\n        deck[currentIndex] = deck[randomIndex];\n        deck[randomIndex] = temporaryValue;\n\n        this.setState({ deck: deck})\n    }\n    }\n\n    displayDeck = () => {\n        for (let i = 0; i < this.state.deck.length; i++) {\n\n        }\n    }\n\n    startGame = () => {\n        this.setState({ level: 0 })\n    }\n\n    renderPage = () => {\n        let level = this.state.level * 1\n        let message = this.state.message[level].message;\n\n        if (this.state.level === null) {\n            return <Start startGame={this.startGame}  />\n        } else {\n            return (\n                <div>\n                <div className=\"clicky-header\">\n                    <div className=\"clicky-header__title\">Clicky Game</div>\n                    <div className=\"clicky-header__subline row\">\n                        <div className=\"clicky-header__score clicky-center col s6\"> Current Score: {this.state.score} </div>\n                        <div className=\"clicky-header__maxScore clicky-center col s6\">Max Score: {this.state.maxScore}</div>\n                        <span className=\"clicky-header__message\"><strong>{`Level: ${level}`}</strong><br/>{message}</span>\n                        \n                    </div>\n                    \n                </div>\n                     <Wrapper  \n                            deck={this.state.deck}\n                            level={this.state.level} \n                            sortDeck={this.sortDeck}\n                            clickForm={this.clickForm}\n                            />\n                </div>\n            )\n        }\n    }\n\n     \n    render() {\n        return (\n            <div>\n                {this.renderPage()}\n            </div>\n        )\n    }\n}","import axios from \"axios\";\n// const BASEURL = \"http//localhost:3001/\";\n\nexport default {\n  route: function(query) {\n    let config = {\n      headers: { 'Access-Control-Allow-Origin': '*'}\n    }\n\n    console.log('call')\n    return axios.get(\"auth/test\",config)  \n  }\n}","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  // withRouter\n} from \"react-router-dom\";\n\n// import Cards from \"./components/pages/game/cards\"\nimport Header from \"./components/common/header\"\nimport About from \"./views/about/about\";\nimport Game from \"./views/game/game\";\nimport Login from \"./views/login/login\";\n// import PrivateRoute from \"./components/auth/PrivateRoute\"\n// import Profile from \"./views/profile\";\nimport Score from \"./views/score/score\";\n\n// import Painel from \"./components/common/painel\"\n// import Wrapper from \"./components/game/wrapper\"\nimport cards from \"./cards.json\"\n\nimport './App.scss';\n\nexport default class App extends Component {\n\n  state = {\n    cards,\n    cardsOrder: []\n  }\n\n  \n\n  componentDidMount = () => {\n\n  }\n\n  buildArray = () => {\n    // var n = cards.length\n    // this.state.cardsOrder.push(n)\n\n    // cards.map(card => (\n    //   this.state.cardsOrder.push(n - 1)\n      \n      \n    // ));\n  }\n\n  \n  render() {\n    return (\n      <Router>\n      <div>\n        {/* <Header /> */}\n        {/* <NavTabs /> */}\n        <Route path=\"/game\" component={Game} />\n        <Route path=\"/\" component={Game} />\n        {/* <Route path=\"/score\" component={Score} />\n        <Route path=\"/login\" component={Login} /> */}\n      \n      </div>\n    </Router>\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API\"\n\n\n\nexport default class Login extends Component {\n\n\n\n    componentDidMount() {\n       \n      }\n    \n      handleInputChange = event => {\n      };\n    \n      authGoogle = event => {\n        event.preventDefault();\n        console.log(\"google auth\")\n        API.route()\n            .then(res => {\n                console.log(res)\n            })\n        \n        \n        // .getDogsOfBreed(this.state.search)\n        //   .then(res => {\n        //     if (res.data.status === \"error\") {\n        //       throw new Error(res.data.message);\n        //     }\n        //     this.setState({ results: res.data.message, error: \"\" });\n        //   })\n        //   .catch(err => this.setState({ error: err.message }));\n      };\n\n    render() {\n        return (\n            <div>\n                <h2>Login</h2>\n                <button type=\"button\" name=\"google\" className=\"btn btn-lg btn-danger rba-btn rba-btn__sign-in--google\"\n                onClick={this.authGoogle}>Google+</button>\n\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\n\nexport default class Score extends Component {\n    render() {\n        return (\n            <div>This is the Scores Page</div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n// import Auth from \"./components/auth\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}